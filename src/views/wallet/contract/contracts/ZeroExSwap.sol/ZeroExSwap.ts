/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ZeroExSwap {
  export type QuoteResponseStruct = {
    sellToken: PromiseOrValue<string>;
    buyToken: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    swapTarget: PromiseOrValue<string>;
    sellAmount: PromiseOrValue<BigNumberish>;
    swapCallData: PromiseOrValue<BytesLike>;
  };

  export type QuoteResponseStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    sellToken: string;
    buyToken: string;
    spender: string;
    swapTarget: string;
    sellAmount: BigNumber;
    swapCallData: string;
  };
}

export interface ZeroExSwapInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "batchSwap((address,address,address,address,uint256,bytes)[])": FunctionFragment;
    "depositETH()": FunctionFragment;
    "exchangeProxy()": FunctionFragment;
    "owner()": FunctionFragment;
    "swap(address,address,address,address,uint256,bytes)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "batchSwap"
      | "depositETH"
      | "exchangeProxy"
      | "owner"
      | "swap"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchSwap",
    values: [ZeroExSwap.QuoteResponseStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "BoughtTokens(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoughtTokens"): EventFragment;
}

export interface BoughtTokensEventObject {
  sellToken: string;
  buyToken: string;
  boughtAmount: BigNumber;
}
export type BoughtTokensEvent = TypedEvent<
  [string, string, BigNumber],
  BoughtTokensEventObject
>;

export type BoughtTokensEventFilter = TypedEventFilter<BoughtTokensEvent>;

export interface ZeroExSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZeroExSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    batchSwap(
      list: ZeroExSwap.QuoteResponseStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeProxy(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    swap(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      swapTarget: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      swapCallData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  batchSwap(
    list: ZeroExSwap.QuoteResponseStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeProxy(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  swap(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    swapTarget: PromiseOrValue<string>,
    sellAmount: PromiseOrValue<BigNumberish>,
    swapCallData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    batchSwap(
      list: ZeroExSwap.QuoteResponseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    exchangeProxy(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    swap(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      swapTarget: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      swapCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoughtTokens(address,address,uint256)"(
      sellToken?: null,
      buyToken?: null,
      boughtAmount?: null
    ): BoughtTokensEventFilter;
    BoughtTokens(
      sellToken?: null,
      buyToken?: null,
      boughtAmount?: null
    ): BoughtTokensEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    batchSwap(
      list: ZeroExSwap.QuoteResponseStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      swapTarget: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      swapCallData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSwap(
      list: ZeroExSwap.QuoteResponseStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      swapTarget: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      swapCallData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
