{
  "address": "0x6D720A93Bf2d137C254e581A9298bf508DBB9fA0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdt_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stEth_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "swap_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ethQty",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserve",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ethQty",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalReserve",
          "type": "uint256"
        }
      ],
      "name": "Sale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "qty",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEVERAGE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PURCHASE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "type_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qty_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "check",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "type_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amt_",
          "type": "uint256"
        }
      ],
      "name": "incPooledAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "purchase_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchedA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchedB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "type_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qty_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pooledA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pooledB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "type_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amt_",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNetWorth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qty_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c70aa379fdd718d504bb107630991b9cb7d9f96ff4e1756f97de61f432c9f15",
  "receipt": {
    "to": null,
    "from": "0xaa0ba2F87112111fa050DEA735cAe9DFA2D87224",
    "contractAddress": "0x6D720A93Bf2d137C254e581A9298bf508DBB9fA0",
    "transactionIndex": 10,
    "gasUsed": "2234680",
    "logsBloom": "0x
    "blockHash": "0xf16694b541f5f0fee310e82cebf7f2b01bd98b3f7d3d0cbcfedd9be86dce1907",
    "transactionHash": "0x1c70aa379fdd718d504bb107630991b9cb7d9f96ff4e1756f97de61f432c9f15",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 8096946,
        "transactionHash": "0x1c70aa379fdd718d504bb107630991b9cb7d9f96ff4e1756f97de61f432c9f15",
        "address": "0x6D720A93Bf2d137C254e581A9298bf508DBB9fA0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa0ba2f87112111fa050dea735cae9dfa2d87224",
          "0x000000000000000000000000aa0ba2f87112111fa050dea735cae9dfa2d87224"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xf16694b541f5f0fee310e82cebf7f2b01bd98b3f7d3d0cbcfedd9be86dce1907"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 8096946,
        "transactionHash": "0x1c70aa379fdd718d504bb107630991b9cb7d9f96ff4e1756f97de61f432c9f15",
        "address": "0x6D720A93Bf2d137C254e581A9298bf508DBB9fA0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55",
          "0x000000000000000000000000aa0ba2f87112111fa050dea735cae9dfa2d87224",
          "0x000000000000000000000000aa0ba2f87112111fa050dea735cae9dfa2d87224"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xf16694b541f5f0fee310e82cebf7f2b01bd98b3f7d3d0cbcfedd9be86dce1907"
      }
    ],
    "blockNumber": 8096946,
    "cumulativeGasUsed": "5716596",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4aF38C24FAAf495C497CDc0bF892a684B665057",
    "0xe13988C4ea052bD497BcBA980045Dd230d5DC7e0",
    "0xB79Cce1938500A15921749ed3E2947f93394b23c",
    "0xb247682e565B57ef0Fdc5Bb02e60061b4C7C4Cd1",
    "0xC264ef02F21A50bcF77542852c3D8955E16afaD0",
    "0x0AE6FB9A465eC35981fEC902c27d1cC73277D333",
    20000
  ],
  "numDeployments": 1,
  "solcInputHash": "4c8b3cd1d4d5f7cf14126fc49044ecb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stEth_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swap_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethQty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserve\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ethQty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserve\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVERAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PURCHASE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qty_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"}],\"name\":\"incPooledAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"purchase_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchedA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchedB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qty_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pooledA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pooledB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amt_\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNetWorth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qty_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint8,address,uint256)\":{\"params\":{\"from_\":\"\\u8d26\\u6237\\u5730\\u5740\",\"qty_\":\"\\u6570\\u91cf\",\"type_\":\"0\\u4e3aaToken,1\\u4e3abToken\"}},\"ethPrice()\":{\"returns\":{\"_0\":\"uint256\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"incPooledAmount(uint8,uint256)\":{\"params\":{\"amt_\":\"\\u91d1\\u989d\",\"type_\":\"0\\u4e3aaToken,1\\u4e3abToken\"}},\"initialize(address)\":{\"params\":{\"purchase_\":\"\\u7533\\u8d2d\\u5408\\u7ea6\\u5730\\u5740\"}},\"leverage()\":{\"returns\":{\"_0\":\"uint256   bToken\\u7684\\u6760\\u6746\\u7387\"}},\"matchedB()\":{\"returns\":{\"_0\":\"uint256\"}},\"mint(uint8,address,uint256)\":{\"params\":{\"qty_\":\"\\u6570\\u91cf\",\"to_\":\"\\u8d26\\u6237\\u5730\\u5740\",\"type_\":\"0\\u4e3aaToken,1\\u4e3abToken\"}},\"redeem(uint8,uint256)\":{\"params\":{\"amt_\":\"\\u91d1\\u989d\",\"type_\":\"0\\u4e3aaToken,1\\u4e3abToken\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalNetWorth()\":{\"returns\":{\"_0\":\"uint256       \\u91d1\\u5e93\\u603b\\u50a8\\u5907\\u51c0\\u503c\"}},\"transfer(address,uint256)\":{\"params\":{\"qty_\":\"USDT\\u6570\\u91cf\",\"to_\":\"\\u8d26\\u6237\\u5730\\u5740\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint8,address,uint256)\":{\"notice\":\"\\u9500\\u6bc1aToken\\u548cbToken\"},\"check()\":{\"notice\":\"\\u68c0\\u67e5bToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1,\\u5982\\u679c\\u5c0f\\u4e8eaToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\u768460%\\u5219\\u89e6\\u53d1\\u4e0b\\u6298\"},\"ethPrice()\":{\"notice\":\"\\u8fd4\\u56de\\u4ea4\\u6613\\u6240\\u7684stEth\\u4ef7\\u683c\"},\"incPooledAmount(uint8,uint256)\":{\"notice\":\"\\u589e\\u52a0\\u672a\\u914d\\u5bf9\\u8d44\\u91d1\"},\"initialize(address)\":{\"notice\":\"\\u521d\\u59cb\\u5316\\u65b9\\u6cd5\"},\"interestRate()\":{\"notice\":\"\\u52a8\\u6001\\u8ba1\\u7b97aToken\\u7684\\u65e5\\u5229\\u606f\"},\"invest()\":{\"notice\":\"\\u4ece\\u8d44\\u91d1\\u6c60\\u4e2d\\u62ff\\u51fa\\u8d44\\u91d1\\u8fdb\\u884c\\u6295\\u8d44\"},\"leverage()\":{\"notice\":\"\\u6760\\u6746\\u7387=aToken\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1/bToken\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1+1\"},\"matchedB()\":{\"notice\":\"\\u8ba1\\u7b97bToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\"},\"mint(uint8,address,uint256)\":{\"notice\":\"\\u5f00\\u91c7aToken\\u548cbToken\"},\"rebase()\":{\"notice\":\"\\u53d8\\u57fa,aToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\u589e\\u52a0\"},\"redeem(uint8,uint256)\":{\"notice\":\"\\u8d4e\\u56de\\u65f6\\u91d1\\u5e93\\u7684\\u64cd\\u4f5c\"},\"totalNetWorth()\":{\"notice\":\"\\u91d1\\u5e93\\u603b\\u50a8\\u5907\\u51c0\\u503c=\\u4ee5\\u592a\\u5e01\\u603b\\u50a8\\u91cf*\\u5f53\\u524d\\u4ee5\\u592a\\u5e01\\u4ef7\\u683c+pooledA+pooledB\"},\"transfer(address,uint256)\":{\"notice\":\"\\u91d1\\u5e93\\u53d1\\u9001USDT\\u7ed9\\u7528\\u6237\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x55e9ebc64510b99ecf322b06c9baa8cccd24f1c30060d3106399641028eeb0aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/EzPurchase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./EzatERC20.sol\\\";\\r\\nimport \\\"./EzbtERC20.sol\\\";\\r\\nimport \\\"./EzioERC20.sol\\\";\\r\\nimport \\\"./Treasury.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EzPurchase is AccessControlEnumerable,ReentrancyGuard{\\r\\n\\r\\n  bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\r\\n  bytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\r\\n\\r\\n  //\\u5b50\\u57fa\\u91d1\\u7c7b\\u578b\\r\\n  enum TYPE{\\r\\n    A,\\r\\n    B\\r\\n  }\\r\\n  string internal constant INVALID_TOKEN = \\\"EzPurchase: Invalid Token\\\";\\r\\n  string internal constant INSUFFICIENT_AMT = \\\"EzPurchase: Insufficient Amount Available\\\";\\r\\n  string internal constant NOT_INVESTED_INVITATION = \\\"EzPurchase: Invitation Is Not Invest\\\";\\r\\n  string internal constant INVALID_INVITATION = \\\"EzPurchase: Invalid Invitation\\\";\\r\\n  string internal constant WRONG_PARAMETER = \\\"EzPurchase: Wrong Parameter\\\";\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n  //\\u7a33\\u5b9a\\u5e01\\u5408\\u7ea6\\r\\n  IERC20 immutable usdt;\\r\\n  //\\u4f18\\u5148\\u4efd\\u989d\\u5408\\u7ea6\\r\\n  EzatERC20 immutable aToken;\\r\\n  //\\u8fdb\\u53d6\\u4efd\\u989d\\u5408\\u7ea6\\r\\n  EzbtERC20 immutable bToken;\\r\\n  //\\u6cbb\\u7406Token\\r\\n  EzioERC20 immutable cToken;\\r\\n  //\\u91d1\\u5e93\\u5408\\u7ea6\\r\\n  Treasury immutable treasury;\\r\\n\\r\\n  //\\u7533\\u8d2d\\u4e8b\\u4ef6\\r\\n  event Purchase(address indexed account, TYPE indexed type_, uint256 indexed amt_, uint256 qty_);\\r\\n  //\\u8d4e\\u56de\\u4e8b\\u4ef6\\r\\n  event Redeem(address indexed account, TYPE indexed type_, uint256 indexed qty_, uint256 amt_);\\r\\n\\r\\n  constructor(address usdt_,address aToken_,address bToken_,address cToken_,address payable treasury_){\\r\\n    usdt = IERC20(usdt_);\\r\\n    aToken = EzatERC20(aToken_);\\r\\n    bToken = EzbtERC20(bToken_);\\r\\n    cToken = EzioERC20(cToken_);\\r\\n    treasury = Treasury(treasury_);\\r\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    _grantRole(GOVERNOR_ROLE, msg.sender);\\r\\n    _grantRole(GOVERNOR_ROLE, treasury_);\\r\\n    _grantRole(TREASURY_ROLE, treasury_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u6295\\u8d44\\u4eba\\u8d2d\\u4e70aToken\\u6216bToken\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param amt_          \\u8d2d\\u4e70\\u82b1\\u8d39\\u7684USDT\\r\\n  */\\r\\n  function purchase(TYPE type_,uint256 amt_) external nonReentrant(){\\r\\n    require(amt_>0,WRONG_PARAMETER);\\r\\n    //\\u6295\\u8d44\\u8005\\u5c06USDT\\u53d1\\u9001\\u5230\\u91d1\\u5e93\\r\\n    usdt.safeTransferFrom(msg.sender,address(treasury), amt_);\\r\\n    if(type_ == TYPE.A){\\r\\n      //console.log(\\\"start purchase aToken\\\");\\r\\n      //\\u91d1\\u5e93\\u5f00\\u91c7aToken\\u7ed9\\u6295\\u8d44\\u8005\\r\\n      uint256 qty = amt_* 1e18 / aToken.netWorth();\\r\\n      treasury.mint(0,msg.sender, qty);\\r\\n      emit Purchase(msg.sender,type_,amt_,qty);\\r\\n      //aToken\\u8d44\\u91d1\\u6c60\\u589e\\u52a0\\r\\n      treasury.incPooledAmount(0, amt_);\\r\\n    }else if(type_ == TYPE.B){\\r\\n      //console.log(\\\"start purchase bToken\\\");\\r\\n      //\\u91d1\\u5e93\\u5f00\\u91c7bToken\\u7ed9\\u6295\\u8d44\\u8005\\r\\n      uint256 qty = amt_* 1e18 / bToken.netWorth();\\r\\n      treasury.mint(1,msg.sender,qty);\\r\\n      emit Purchase(msg.sender,type_,amt_,qty);\\r\\n      //bToken\\u8d44\\u91d1\\u6c60\\u589e\\u52a0\\r\\n      treasury.incPooledAmount(1, amt_);\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u6295\\u8d44\\u4eba\\u8d4e\\u56deaToken\\u6216bToken\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param qty_          \\u8d4e\\u56de\\u7684\\u6570\\u91cf\\r\\n  */\\r\\n  function redeem(TYPE type_,uint256 qty_) external nonReentrant(){\\r\\n    require(qty_>0,WRONG_PARAMETER);\\r\\n    if(type_ == TYPE.A){\\r\\n      //\\u91d1\\u5e93\\u8f6cUSDT\\u7ed9\\u7528\\u6237\\r\\n      uint256 amt = qty_ * aToken.netWorth() / 1e18;\\r\\n      treasury.transfer(msg.sender, amt);\\r\\n      //\\u9500\\u6bc1aToken\\r\\n      treasury.burn(0,msg.sender,qty_);\\r\\n      //\\u8d4e\\u56de\\u65f6\\u91d1\\u5e93\\u7684\\u64cd\\u4f5c\\r\\n      treasury.redeem(0,amt);\\r\\n      emit Redeem(msg.sender,type_,qty_,amt);\\r\\n    }else if(type_ == TYPE.B){\\r\\n      //\\u91d1\\u5e93\\u8f6cUSDT\\u7ed9\\u7528\\u6237\\r\\n      uint256 amt = qty_ * bToken.netWorth() / 1e18;\\r\\n      treasury.transfer(msg.sender, amt);\\r\\n      //\\u9500\\u6bc1bToken\\r\\n      treasury.burn(1,msg.sender,qty_);\\r\\n      //\\u8d4e\\u56de\\u65f6\\u91d1\\u5e93\\u7684\\u64cd\\u4f5c\\r\\n      treasury.redeem(1,amt);\\r\\n      emit Redeem(msg.sender,type_,qty_,amt);\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4ab569a9f2e45a7582461daf582019043813a718886b0c41c138c4fcf4641269\",\"license\":\"MIT\"},\"contracts/EzToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\n\\r\\ncontract EzToken is ERC20Pausable, AccessControlEnumerable {\\r\\n  //MINTER_ROLE\\u7684hash\\r\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n  //BURNER_ROLE\\u7684hash\\r\\n  bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n  //TREASURY_ROLE\\u7684hash\\r\\n  bytes32 public constant TREASURY_ROLE = keccak256(\\\"TREASURY_ROLE\\\");\\r\\n\\r\\n  constructor(string memory name_,string memory symbol_,uint256 initialSupply_) ERC20(name_,symbol_){\\r\\n    _mint(msg.sender, initialSupply_*1e18);\\r\\n    //\\u8d4b\\u4e88\\u5408\\u7ea6\\u53d1\\u5e03\\u8005\\u7ba1\\u7406\\u5458\\u7684\\u6743\\u9650\\r\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice          \\u5f00\\u91c7token,onlyRole(MINTER_ROLE)\\u4fee\\u9970\\u7b26\\u786e\\u4fdd\\u53ea\\u6709\\u5408\\u7ea6\\u521d\\u59cb\\u5316\\u65f6\\u8bbe\\u5b9a\\u7684minter\\u8d26\\u6237\\u624d\\u80fd\\u6267\\u884cmint\\u65b9\\u6cd5\\r\\n  * @param to        \\u83b7\\u5f97token\\u7684\\u8d26\\u6237\\r\\n  * @param amount    \\u6316\\u77ff\\u7684\\u6570\\u91cf\\r\\n  */\\r\\n  function mint(address to, uint256 amount) public virtual onlyRole(MINTER_ROLE){\\r\\n    _mint(to,amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice          \\u9500\\u6bc1token,onlyRole(BURNER_ROLE)\\u4fee\\u9970\\u7b26\\u786e\\u4fdd\\u53ea\\u6709\\u5408\\u7ea6\\u521d\\u59cb\\u5316\\u65f6\\u8bbe\\u5b9a\\u7684burner\\u8d26\\u6237\\u624d\\u80fd\\u6267\\u884cburn\\u65b9\\u6cd5\\r\\n  * @param from      \\u9500\\u6bc1token\\u7684\\u8d26\\u6237\\r\\n  * @param amount    \\u9500\\u6bc1\\u7684\\u6570\\u91cf\\r\\n  */\\r\\n  function burn(address from, uint256 amount) public virtual onlyRole(BURNER_ROLE) {\\r\\n    _burn(from,amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice          \\u6682\\u505c\\u8f6c\\u8d26\\u529f\\u80fd\\r\\n  */\\r\\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice             \\u6062\\u590d\\u8f6c\\u8d26\\u529f\\u80fd\\r\\n  */\\r\\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5ebcf597b4ed4deb6d07da36532d9e067fa95a583e5cd4fb6baf8a1cf89e25ec\",\"license\":\"MIT\"},\"contracts/EzatERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./EzToken.sol\\\";\\r\\nimport \\\"./Treasury.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EzatERC20 is EzToken {\\r\\n  //\\u662f\\u5426\\u521d\\u59cb\\u5316\\r\\n  bool private initialized;\\r\\n  //\\u91d1\\u5e93\\u5408\\u7ea6\\r\\n  Treasury treasury;\\r\\n\\r\\n  string internal constant ALREADY_INITIALIZED = \\\"Contract Already Initialized\\\";\\r\\n\\r\\n  constructor() EzToken(\\\"Priority Token\\\", \\\"EZAT\\\",0) {\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u521d\\u59cb\\u5316\\u65b9\\u6cd5\\r\\n  * @param treasury_  \\u91d1\\u5e93\\u5730\\u5740\\r\\n  */\\r\\n  function initialize(address payable treasury_) external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    require(!initialized, ALREADY_INITIALIZED);\\r\\n    initialized = true;\\r\\n    treasury = Treasury(treasury_);\\r\\n    _grantRole(MINTER_ROLE, treasury_);\\r\\n    _grantRole(BURNER_ROLE, treasury_);\\r\\n    _grantRole(TREASURY_ROLE, treasury_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u603b\\u51c0\\u503c=\\u672a\\u914d\\u5bf9\\u8d44\\u91d1+\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @return uint256   aToken\\u7684\\u603b\\u51c0\\u503c\\r\\n  */\\r\\n  function totalNetWorth() public view virtual returns (uint256){\\r\\n    return treasury.pooledA()+treasury.matchedA();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice        \\u83b7\\u53d6\\u6bcf\\u4efd\\u7684\\u51c0\\u503c\\r\\n  * @return uint256   aToken\\u6bcf\\u4efd\\u7684\\u51c0\\u503c\\r\\n  */\\r\\n  function shareNetWorth() public view virtual returns (uint256){\\r\\n    //console.log(\\\"EzatERC20.shareNetWorth totalNetWorth=\\\",totalNetWorth());\\r\\n    //console.log(\\\"EzatERC20.shareNetWorth totalShare=\\\",totalShare());\\r\\n    return totalShare()==0?1e18:totalNetWorth()*1e18/totalShare();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice        \\u83b7\\u53d6\\u51c0\\u503c,\\u6052\\u5b9a\\u4e3a1e18\\r\\n  * @return uint256   aToken\\u7684\\u51c0\\u503c\\r\\n  */\\r\\n  function netWorth() public view virtual returns (uint256){\\r\\n    return 1e18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice        aToken\\u603b\\u4efd\\u6570\\r\\n  * @return uint256   \\u603b\\u4efd\\u6570\\r\\n  */\\r\\n  function totalShare() public view virtual returns (uint256){\\r\\n    return super.totalSupply();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice         \\u91cd\\u5199totalSupply\\r\\n  * @return uint256\\r\\n  */\\r\\n  function totalSupply() public view override returns (uint256){\\r\\n    return super.totalSupply() * shareNetWorth() / 1e18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice          \\u91cd\\u5199balanceOf\\r\\n  * @param account   \\u8d26\\u6237\\u5730\\u5740\\r\\n  * @return uint256\\r\\n  */\\r\\n  function balanceOf(address account) public view override returns (uint256){\\r\\n    return shareNetWorth() * super.balanceOf(account) / 1e18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice        \\u91cd\\u5199transfer\\r\\n  * @param to      \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param amount  \\u6570\\u91cf\\r\\n  * @return bool\\r\\n  */\\r\\n  function transfer(address to, uint256 amount) public override returns (bool){\\r\\n    return super.transfer(to, amount * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice         \\u91cd\\u5199allowance\\r\\n  * @param owner    \\u6765\\u6e90\\u8d26\\u6237\\r\\n  * @param spender  \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @return uint256\\r\\n  */\\r\\n  function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n    return shareNetWorth() * super.allowance(owner,spender) /1e18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice         \\u91cd\\u5199approve\\r\\n  * @param spender  \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param amount   \\u6570\\u91cf\\r\\n  * @return bool\\r\\n  */\\r\\n  function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n    return super.approve(spender,amount * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice         \\u91cd\\u5199transferFrom\\r\\n  * @param from     \\u6765\\u6e90\\u8d26\\u6237\\r\\n  * @param to       \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param amount   \\u6570\\u91cf\\r\\n  * @return bool\\r\\n  */\\r\\n  function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\r\\n    return super.transferFrom(from,to,amount * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice             \\u91cd\\u5199increaseAllowance\\r\\n  * @param spender      \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param addedValue   \\u589e\\u52a0\\u91cf\\r\\n  * @return bool\\r\\n  */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\\r\\n    return super.increaseAllowance(spender,addedValue * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice                 \\u91cd\\u5199decreaseAllowance\\r\\n  * @param spender          \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param subtractedValue  \\u51cf\\u5c11\\u91cf\\r\\n  * @return bool\\r\\n  */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\\r\\n    return super.decreaseAllowance(spender,subtractedValue * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice            \\u91cd\\u5199mint\\r\\n  * @param to          \\u76ee\\u6807\\u8d26\\u6237\\r\\n  * @param amount      \\u6570\\u91cf\\r\\n  */\\r\\n  function mint(address to, uint256 amount) public override {\\r\\n    super.mint(to, amount * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice            \\u91cd\\u5199burn\\r\\n  * @param from        \\u6765\\u6e90\\u8d26\\u6237\\r\\n  * @param amount      \\u6570\\u91cf\\r\\n  */\\r\\n  function burn(address from, uint256 amount) public override {\\r\\n    super.burn(from, amount * 1e18 / shareNetWorth());\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x2670edb32151f15be982cfeb4d2737209245a551cce11adecb54c7971a62e73e\",\"license\":\"MIT\"},\"contracts/EzbtERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./EzToken.sol\\\";\\r\\nimport \\\"./Treasury.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EzbtERC20 is EzToken{\\r\\n  //\\u662f\\u5426\\u521d\\u59cb\\u5316\\r\\n  bool private initialized;\\r\\n  string internal constant ALREADY_INITIALIZED = \\\"Contract Already Initialized\\\";\\r\\n\\r\\n  //\\u91d1\\u5e93\\u5408\\u7ea6\\r\\n  Treasury treasury;\\r\\n\\r\\n  constructor() EzToken(\\\"Enterprise Token\\\", \\\"EZBT\\\",0) {\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u521d\\u59cb\\u5316\\u65b9\\u6cd5\\r\\n  * @param treasury_  \\u91d1\\u5e93\\u5730\\u5740\\r\\n  */\\r\\n  function initialize(address payable treasury_) external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    require(!initialized, ALREADY_INITIALIZED);\\r\\n    initialized = true;\\r\\n    treasury = Treasury(treasury_);\\r\\n    _grantRole(MINTER_ROLE, treasury_);\\r\\n    _grantRole(BURNER_ROLE, treasury_);\\r\\n    _grantRole(TREASURY_ROLE, treasury_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice          \\u51c0\\u503c=\\u603b\\u51c0\\u503c/\\u603b\\u4f9b\\u5e94\\u91cf\\r\\n  * @return uint256  bToken\\u7684\\u51c0\\u503c\\r\\n  */\\r\\n  function netWorth() public view returns(uint256){\\r\\n    return totalSupply()==0?1e18:totalNetWorth()*1e18/totalSupply();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice            \\u603b\\u51c0\\u503c=\\u672a\\u914d\\u5bf9\\u8d44\\u91d1+\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @return uint256    bToken\\u603b\\u51c0\\u503c\\r\\n  */\\r\\n  function totalNetWorth() public view virtual returns (uint256){\\r\\n    return treasury.pooledB()+treasury.matchedB();\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd9182316ca64a9dccf7996012dbe09143fc6c0e3c92cc05b6d5809ce0a6e51c8\",\"license\":\"MIT\"},\"contracts/EzioERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./EzToken.sol\\\";\\r\\nimport \\\"./EzPurchase.sol\\\";\\r\\n\\r\\ncontract EzioERC20 is EzToken {\\r\\n\\r\\n  //\\u7533\\u8d2d\\u5408\\u7ea6\\r\\n  EzPurchase purchase;\\r\\n\\r\\n  //\\u662f\\u5426\\u521d\\u59cb\\u5316\\r\\n  bool private initialized;\\r\\n\\r\\n  string internal constant ALREADY_INITIALIZED = \\\"Contract Already Initialized\\\";\\r\\n\\r\\n  constructor() EzToken(\\\"Reward Token\\\", \\\"EZIO\\\",0) {\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u521d\\u59cb\\u5316\\u65b9\\u6cd5\\r\\n  * @param purchase_  \\u7533\\u8d2d\\u5408\\u7ea6\\u5730\\u5740\\r\\n  */\\r\\n  function initialize(address purchase_,address treasury_) external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    require(!initialized, ALREADY_INITIALIZED);\\r\\n    initialized = true;\\r\\n    purchase = EzPurchase(purchase_);\\r\\n    _grantRole(MINTER_ROLE, purchase_);\\r\\n    _grantRole(BURNER_ROLE, purchase_);\\r\\n    _grantRole(MINTER_ROLE, treasury_);\\r\\n    _grantRole(BURNER_ROLE, treasury_);\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xbe81e0c69c3b8ae2231ca8db6a394010a55fb01a40664a0d0add315cab3efd74\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Swap is AccessControlEnumerable{\\r\\n\\r\\n  bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\r\\n  using SafeERC20 for IERC20;\\r\\n  IERC20 immutable usdt;\\r\\n  IERC20 immutable stEth;\\r\\n  //chainlink\\u805a\\u5408\\u5668\\r\\n  AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n  constructor(address usdt_,address stEth_){\\r\\n    usdt = IERC20(usdt_);\\r\\n    stEth = IERC20(stEth_);\\r\\n    priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n    _grantRole(GOVERNOR_ROLE, msg.sender);\\r\\n  }\\r\\n\\r\\n  receive() external payable{\\r\\n  }\\r\\n\\r\\n  //\\u4ecechainlink\\u83b7\\u53d6\\u6700\\u65b0\\u7684\\u4ee5\\u592a\\u5e01\\u4ef7\\u683c\\r\\n  function price() public view returns (uint256 _price){\\r\\n    (,int256 answer,,,) = priceFeed.latestRoundData();\\r\\n    //\\u8fd4\\u56de\\u7684answer\\u662f8\\u4f4d\\u5c0f\\u6570,\\u8f6c\\u6362\\u4e3a18\\u4f4d\\u5c0f\\u6570\\r\\n    _price = uint256(answer)*1e10;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice             \\u6d4b\\u8bd5\\u73af\\u5883\\u6a21\\u62df\\u4f7f\\u7528\\u7a33\\u5b9a\\u5e01\\u8d2d\\u4e70stEth\\r\\n  * @param amount_      \\u7528\\u4e8e\\u8d2d\\u4e70stEth\\u7684USDT\\u7684\\u6570\\u91cf\\r\\n  * @return uint256     \\u8d2d\\u4e70\\u7684stEth\\u7684\\u6570\\u91cf,\\u5355\\u4f4d\\u662fwei\\r\\n  */\\r\\n  function buyEther(uint256 amount_) external returns(uint256){\\r\\n    uint256 ethAmount = amount_* 1 ether/price();\\r\\n    //msg.sender\\u53d1\\u9001USDT\\u5230\\u4ea4\\u6613\\u6240\\u5408\\u7ea6\\r\\n    usdt.safeTransferFrom(msg.sender,address(this), amount_);\\r\\n    //\\u4ea4\\u6613\\u6240\\u53d1\\u9001stETH\\u7ed9msg.sender\\r\\n    stEth.safeTransfer(msg.sender,ethAmount);\\r\\n    return ethAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice               \\u6d4b\\u8bd5\\u73af\\u5883\\u6a21\\u62df\\u4f7f\\u7528stEth\\u5151\\u6362USDT\\r\\n  * @param ethAmount      \\u51fa\\u552e\\u7684stEth\\u7684\\u6570\\u91cf\\r\\n  * @return uint256       \\u8d2d\\u4e70\\u7684USDT\\u7684\\u6570\\u91cf\\r\\n  */\\r\\n  function saleEther(uint256 ethAmount) external returns(uint256){\\r\\n    //console.log(\\\"Swap.saleEther: msg.value=\\\",msg.value);\\r\\n    require(ethAmount>0,\\\"Zero Ethereum Amount\\\");\\r\\n    uint256 usdtAmount = ethAmount * price() / 1 ether;\\r\\n    //\\u4ea4\\u6613\\u6240\\u53d1\\u9001USDT\\u7ed9msg.sender\\r\\n    usdt.safeTransfer(msg.sender,usdtAmount);\\r\\n    //msg.sender\\u53d1\\u9001stETH\\u5230\\u4ea4\\u6613\\u6240\\u5408\\u7ea6\\r\\n    stEth.safeTransferFrom(msg.sender,address(this), ethAmount);\\r\\n    return usdtAmount;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x74ab9dee245de88d1cc54e70c3e8355385fd10dd04b258a2955c84423922ce64\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./EzatERC20.sol\\\";\\r\\nimport \\\"./EzbtERC20.sol\\\";\\r\\nimport \\\"./EzioERC20.sol\\\";\\r\\nimport \\\"./EzPurchase.sol\\\";\\r\\nimport \\\"./Swap.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\ncontract Treasury is AccessControlEnumerable, ReentrancyGuard{\\r\\n  bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\r\\n  bytes32 public constant PURCHASE_ROLE = keccak256(\\\"PURCHASE_ROLE\\\");\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n  //\\u7a33\\u5b9a\\u5e01\\u5408\\u7ea6\\r\\n  IERC20 immutable usdt;\\r\\n  //\\u4ea4\\u6613\\u6240\\u5408\\u7ea6\\r\\n  Swap immutable swap;\\r\\n  //\\u4f18\\u5148\\u4efd\\u989d\\u5408\\u7ea6\\r\\n  EzatERC20 immutable aToken;\\r\\n  //\\u8fdb\\u53d6\\u4efd\\u989d\\u5408\\u7ea6\\r\\n  EzbtERC20 immutable bToken;\\r\\n  //\\u5956\\u52b1Token\\u5408\\u7ea6\\r\\n  EzioERC20 immutable cToken;\\r\\n  //stEth\\r\\n  IERC20 immutable stEth;\\r\\n  //\\u7533\\u8d2d\\u5408\\u7ea6\\r\\n  EzPurchase purchase;\\r\\n  //\\u662f\\u5426\\u521d\\u59cb\\u5316\\r\\n  bool private initialized;\\r\\n  //\\u4ee5\\u592a\\u5e01\\u603b\\u50a8\\u91cf,\\u8d2d\\u4e70stEth\\u65f6\\u4f1a\\u589e\\u52a0,\\u51fa\\u552estEth\\u65f6\\u4f1a\\u51cf\\u5c11\\r\\n  uint256 public totalReserve;\\r\\n  //\\u672a\\u914d\\u5bf9\\u7684aToken\\u8d44\\u91d1\\r\\n  uint256 public pooledA;\\r\\n  //\\u5df2\\u914d\\u5bf9\\u7684aToken\\u8d44\\u91d1\\r\\n  uint256 public matchedA;\\r\\n  //\\u672a\\u914d\\u5bf9\\u7684bToken\\u8d44\\u91d1\\r\\n  uint256 public pooledB;\\r\\n  //\\u56de\\u62a5\\u7387\\r\\n  uint256 public immutable rewardRate;\\r\\n  //\\u56de\\u62a5\\u7387\\u7684\\u5206\\u6bcd\\r\\n  uint256 public constant REWARD_RATE_DENOMINATOR = 100000000;\\r\\n  //\\u6760\\u6746\\u500d\\u6570\\u7684\\u5206\\u6bcd\\r\\n  uint256 public constant LEVERAGE_DENOMINATOR = 10000;\\r\\n\\r\\n  string internal constant INVALID_TOKEN = \\\"Treasury: Invalid Token\\\";\\r\\n  string internal constant ALREADY_INITIALIZED = \\\"Contract Already Initialized\\\";\\r\\n\\r\\n  //\\u6295\\u8d44\\u4e8b\\u4ef6\\r\\n  event Invest(uint256 indexed amountA,uint256 indexed amountB);\\r\\n  //\\u8d2d\\u4e70\\u4ee5\\u592a\\u5e01\\u4e8b\\u4ef6\\r\\n  event Buy(uint256 indexed amt, uint256 indexed ethQty,uint256 indexed totalReserve);\\r\\n  //\\u51fa\\u552e\\u4ee5\\u592a\\u5e01\\u4e8b\\u4ef6\\r\\n  event Sale(uint256 indexed ethQty, uint256 indexed amt,uint256 indexed totalReserve);\\r\\n  //\\u8f6c\\u8d26USDT\\u4e8b\\u4ef6\\r\\n  event Transfer(address indexed to, uint256 indexed qty);\\r\\n\\r\\n  constructor(address usdt_,address aToken_,address bToken_,address cToken_,address stEth_,address payable swap_,uint256 rewardRate_){\\r\\n    usdt = IERC20(usdt_);\\r\\n    aToken = EzatERC20(aToken_);\\r\\n    bToken = EzbtERC20(bToken_);\\r\\n    cToken = EzioERC20(cToken_);\\r\\n    stEth = IERC20(stEth_);\\r\\n    swap = Swap(swap_);\\r\\n    rewardRate = rewardRate_;\\r\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    _grantRole(GOVERNOR_ROLE, msg.sender);\\r\\n  }\\r\\n\\r\\n  receive() external payable{\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u521d\\u59cb\\u5316\\u65b9\\u6cd5\\r\\n  * @param purchase_  \\u7533\\u8d2d\\u5408\\u7ea6\\u5730\\u5740\\r\\n  */\\r\\n  function initialize(address purchase_) external onlyRole(DEFAULT_ADMIN_ROLE){\\r\\n    require(!initialized, ALREADY_INITIALIZED);\\r\\n    initialized = true;\\r\\n    purchase = EzPurchase(purchase_);\\r\\n    _grantRole(PURCHASE_ROLE, purchase_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u5f00\\u91c7aToken\\u548cbToken\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param to_           \\u8d26\\u6237\\u5730\\u5740\\r\\n  * @param qty_          \\u6570\\u91cf\\r\\n  */\\r\\n  function mint(uint8 type_,address to_,uint256 qty_) external onlyRole(PURCHASE_ROLE){\\r\\n    if(type_ == 0){\\r\\n      //\\u5f00\\u91c7aToken\\r\\n      aToken.mint(to_,qty_);\\r\\n    }else if(type_ == 1){\\r\\n      //\\u5f00\\u91c7bToken\\r\\n      bToken.mint(to_,qty_);\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u9500\\u6bc1aToken\\u548cbToken\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param from_         \\u8d26\\u6237\\u5730\\u5740\\r\\n  * @param qty_          \\u6570\\u91cf\\r\\n  */\\r\\n  function burn(uint8 type_,address from_,uint256 qty_) external onlyRole(PURCHASE_ROLE){\\r\\n    if(type_ == 0){\\r\\n      //\\u9500\\u6bc1aToken\\r\\n      aToken.burn(from_,qty_);\\r\\n    }else if(type_ == 1){\\r\\n      //\\u9500\\u6bc1bToken\\r\\n      bToken.burn(from_,qty_);\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u589e\\u52a0\\u672a\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param amt_          \\u91d1\\u989d\\r\\n  */\\r\\n  function incPooledAmount(uint8 type_,uint256 amt_) public onlyRole(PURCHASE_ROLE){\\r\\n    if(type_ == 0){\\r\\n      //pooledA\\u589e\\u52a0\\r\\n      pooledA += amt_;\\r\\n    }else if(type_ == 1){\\r\\n      //pooledB\\u589e\\u52a0\\r\\n      pooledB += amt_;\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u51cf\\u5c11\\u672a\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param amt_          \\u91d1\\u989d\\r\\n  */\\r\\n  function decPooledAmount(uint8 type_,uint256 amt_) internal{\\r\\n    if(type_ == 0){\\r\\n      //pooledA\\u51cf\\u5c11\\r\\n      pooledA -= amt_;\\r\\n    }else if(type_ == 1){\\r\\n      //pooledB\\u51cf\\u5c11\\r\\n      pooledB -= amt_;\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u589e\\u52a0aToken\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @param amt_          \\u91d1\\u989d\\r\\n  */\\r\\n  function incMatchedA(uint256 amt_) internal{\\r\\n      matchedA += amt_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u51cf\\u5c11\\u5df2\\u914d\\u5bf9aToken\\u8d44\\u91d1\\r\\n  * @param amt_          \\u91d1\\u989d\\r\\n  */\\r\\n  function decMatchedA(uint256 amt_) internal{\\r\\n    matchedA -= amt_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u8ba1\\u7b97bToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\r\\n  * @return uint256\\r\\n  */\\r\\n  function matchedB() public view returns(uint256){\\r\\n    return totalReserve*ethPrice()/1e18-matchedA;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u91d1\\u5e93\\u53d1\\u9001USDT\\u7ed9\\u7528\\u6237\\r\\n  * @param to_           \\u8d26\\u6237\\u5730\\u5740\\r\\n  * @param qty_          USDT\\u6570\\u91cf\\r\\n  */\\r\\n  function transfer(address to_,uint256 qty_) external nonReentrant() onlyRole(PURCHASE_ROLE){\\r\\n    usdt.safeTransfer(to_,qty_);\\r\\n    emit Transfer(to_,qty_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u4ece\\u8d44\\u91d1\\u6c60\\u4e2d\\u62ff\\u51fa\\u8d44\\u91d1\\u8fdb\\u884c\\u6295\\u8d44\\r\\n  */\\r\\n  function invest() external onlyRole(GOVERNOR_ROLE) nonReentrant(){\\r\\n    if(pooledB>0){\\r\\n      //\\u5224\\u65adB\\u8d44\\u91d1\\u6c60\\u8d44\\u91d1\\u8d44\\u91d1\\u662f\\u5426\\u5927\\u4e8eA\\u8d44\\u91d1\\u6c60\\u8d44\\u91d1\\r\\n      if(pooledB>pooledA){\\r\\n        //\\u5982\\u679c\\u5927\\u4e8e\\u5219\\u8c03\\u7528A\\u3001B\\u8d44\\u91d1\\u6c60\\u7684\\u5168\\u90e8\\u8d44\\u91d1\\r\\n        _buyEth(pooledB+pooledA);\\r\\n        incMatchedA(pooledA);\\r\\n        emit Invest(pooledA,pooledB);\\r\\n        decPooledAmount(0,pooledA);\\r\\n        decPooledAmount(1,pooledB);\\r\\n      }else{\\r\\n        //\\u5982\\u679c\\u5c0f\\u4e8e\\u6216\\u7b49\\u4e8e\\u5219\\u8c03\\u7528B\\u8d44\\u91d1\\u6c60\\u8d44\\u91d1\\u548c\\u540c\\u7b49\\u7684A\\u8d44\\u91d1\\u6c60\\u8d44\\u91d1\\r\\n        _buyEth(pooledB*2);\\r\\n        incMatchedA(pooledB);\\r\\n        emit Invest(pooledB,pooledB);\\r\\n        decPooledAmount(0,pooledB);\\r\\n        decPooledAmount(1,pooledB);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice              \\u8d4e\\u56de\\u65f6\\u91d1\\u5e93\\u7684\\u64cd\\u4f5c\\r\\n  * @param type_         0\\u4e3aaToken,1\\u4e3abToken\\r\\n  * @param amt_          \\u91d1\\u989d\\r\\n  */\\r\\n  function redeem(uint8 type_,uint256 amt_) external onlyRole(PURCHASE_ROLE) nonReentrant(){\\r\\n    if(type_ == 0){\\r\\n      if(amt_ <= pooledA){\\r\\n        //pooledA\\u51cf\\u5c11\\r\\n        decPooledAmount(0,amt_);\\r\\n      }else{\\r\\n        //\\u51fa\\u552estETH\\r\\n        uint256 saleWorth = amt_ - pooledA;\\r\\n        uint256 stEthQty = saleWorth * 1e18 / ethPrice();\\r\\n        _saleEth(stEthQty);\\r\\n        //pooledA\\u51cf\\u5c11,matchedA\\u51cf\\u5c11\\r\\n        decMatchedA(saleWorth);\\r\\n        decPooledAmount(0,pooledA);\\r\\n      }\\r\\n    }else if(type_ == 1){\\r\\n      if(amt_ <= pooledB){\\r\\n        //pooledB\\u51cf\\u5c11\\r\\n        decPooledAmount(1,amt_);\\r\\n      }else{\\r\\n        //\\u51fa\\u552estETH\\r\\n        uint256 stEthQty = totalReserve * amt_ / bToken.totalNetWorth();\\r\\n        uint usdtAmount = _saleEth(stEthQty);\\r\\n        //pooledA\\u589e\\u52a0\\r\\n        incPooledAmount(0,usdtAmount-amt_);\\r\\n        //matchedA\\u51cf\\u5c11\\r\\n        decMatchedA(usdtAmount-amt_);\\r\\n      }\\r\\n    }else{\\r\\n      revert(INVALID_TOKEN);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u6a21\\u62df\\u7528USDT\\u5411\\u4ea4\\u6613\\u6240\\u8d2d\\u4e70stEth,\\u975e\\u5b89\\u5168\\u65b9\\u6cd5\\r\\n  * @param amt_       \\u7528\\u4e8e\\u8d2d\\u4e70\\u4ee5\\u592a\\u5e01\\u7684USDT\\r\\n  * @return uint256   \\u8d2d\\u4e70\\u7684stEth\\u6570\\u91cf,\\u5355\\u4f4d\\u662fwei\\r\\n  */\\r\\n  function _buyEth(uint256 amt_) internal returns (uint256){\\r\\n    require(usdt.approve(address(swap),amt_),\\\"Treasury:Approve Failed\\\");\\r\\n    //console.log(\\\"Treasury._buyEth: allowance balance=\\\",usdt.allowance(address(this),address(swap)));\\r\\n    //console.log(\\\"Treasury._buyEth: treasury balance=\\\",usdt.balanceOf(address(this)));\\r\\n    uint256 ethQty = swap.buyEther(amt_);\\r\\n    require(ethQty > 0,\\\"Buy Ether Error\\\");\\r\\n    totalReserve += ethQty;\\r\\n    emit Buy(amt_,ethQty,totalReserve);\\r\\n    return ethQty;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice         \\u6a21\\u62df\\u5411\\u4ea4\\u6613\\u6240\\u51fa\\u552e\\u4ee5\\u592a\\u5e01,\\u975e\\u5b89\\u5168\\u65b9\\u6cd5\\r\\n  * @param qty_     \\u51fa\\u552e\\u7684stEth\\u6570\\u91cf,\\u5355\\u4f4d\\u4e3awei\\r\\n  * @return uint256    \\u6362\\u53d6\\u7684USDT\\u7684\\u6570\\u91cf\\r\\n  */\\r\\n  function _saleEth(uint256 qty_) internal returns (uint256){\\r\\n    require(qty_>0,\\\"Treasury:Wrong Parameter\\\");\\r\\n    require(stEth.approve(address(swap),qty_),\\\"Treasury:Approve Failed\\\");\\r\\n    //\\u603b\\u50a8\\u91cf\\u51cf\\u5c11\\r\\n    totalReserve -= qty_;\\r\\n    uint256 usdtAmount = swap.saleEther(qty_);\\r\\n    emit Sale(qty_,usdtAmount,totalReserve);\\r\\n    return usdtAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice    \\u68c0\\u67e5bToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1,\\u5982\\u679c\\u5c0f\\u4e8eaToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\u768460%\\u5219\\u89e6\\u53d1\\u4e0b\\u6298\\r\\n  */\\r\\n  function check() external nonReentrant() {\\r\\n    //\\u5982\\u679cstETH\\u4e0b\\u8dcc\\u5bfc\\u81f4bToken\\u5f52\\u96f6,\\u5219\\u8ba9matchedA\\u7b49\\u4e8e\\u603b\\u50a8\\u5907\\u51c0\\u503c\\r\\n    if(totalReserve*ethPrice()/1e18<matchedA){\\r\\n      matchedA = totalReserve*ethPrice()/1e18;\\r\\n    }\\r\\n    if(matchedB()<matchedA*3/5){\\r\\n      _convertDown();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice    \\u4e0b\\u6298,\\u51fa\\u552e1/4\\u7684stETH,\\u6240\\u83b7USDT\\u5b58\\u5165pooledA\\r\\n  */\\r\\n  function _convertDown() internal {\\r\\n    //console.log(\\\"Treasury._convertDown start\\\");\\r\\n    uint256 saleAmt = _saleEth(totalReserve/4);\\r\\n    matchedA -= saleAmt;\\r\\n    pooledA += saleAmt;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice           \\u6760\\u6746\\u7387=aToken\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1/bToken\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1+1\\r\\n  * @return uint256   bToken\\u7684\\u6760\\u6746\\u7387\\r\\n  */\\r\\n  function leverage() external view returns(uint256){\\r\\n    return matchedB()>0?LEVERAGE_DENOMINATOR*matchedA/matchedB()+1*LEVERAGE_DENOMINATOR:20000;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice               \\u91d1\\u5e93\\u603b\\u50a8\\u5907\\u51c0\\u503c=\\u4ee5\\u592a\\u5e01\\u603b\\u50a8\\u91cf*\\u5f53\\u524d\\u4ee5\\u592a\\u5e01\\u4ef7\\u683c+pooledA+pooledB\\r\\n  * @return uint256       \\u91d1\\u5e93\\u603b\\u50a8\\u5907\\u51c0\\u503c\\r\\n  */\\r\\n  function totalNetWorth() public view returns(uint256){\\r\\n    return totalReserve*swap.price()/1e18+pooledA+pooledB;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice               \\u8fd4\\u56de\\u4ea4\\u6613\\u6240\\u7684stEth\\u4ef7\\u683c\\r\\n  * @return uint256\\r\\n  */\\r\\n  function ethPrice() public view returns(uint256){\\r\\n    return swap.price();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice               \\u53d8\\u57fa,aToken\\u7684\\u5df2\\u914d\\u5bf9\\u8d44\\u91d1\\u589e\\u52a0\\r\\n  */\\r\\n  function rebase() public onlyRole(GOVERNOR_ROLE){\\r\\n    matchedA += matchedA * rewardRate/REWARD_RATE_DENOMINATOR;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @notice               \\u52a8\\u6001\\u8ba1\\u7b97aToken\\u7684\\u65e5\\u5229\\u606f\\r\\n  */\\r\\n  function interestRate() public view returns(uint256){\\r\\n    return aToken.totalNetWorth()>0?(matchedA * rewardRate)/ aToken.totalNetWorth():rewardRate;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8871e3f871deb7f9ba8bfe4c98a73bbb01947a94c4b1219d97339c85863822aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200273438038062002734833981016040819052620000359162000231565b60016002556001600160601b0319606088811b821660805287811b821660c05286811b821660e05285811b82166101005284811b82166101205283901b1660a05261014081905262000089600033620000c2565b620000b57f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5533620000c2565b50505050505050620002d0565b620000d982826200010560201b620012b91760201c565b6000828152600160209081526040909120620001009183906200133d620001a6821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001a2576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001613390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620001bd836001600160a01b038416620001c6565b90505b92915050565b60008181526001830160205260408120546200020f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001c0565b506000620001c0565b6001600160a01b03811681146200022e57600080fd5b50565b600080600080600080600060e0888a0312156200024d57600080fd5b87516200025a8162000218565b60208901519097506200026d8162000218565b6040890151909650620002808162000218565b6060890151909550620002938162000218565b6080890151909450620002a68162000218565b60a0890151909350620002b98162000218565b8092505060c0880151905092959891949750929550565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c610140516123986200039c600039600081816103670152818161088f015281816109440152610cba0152600061155501526000505060008181610a5401528181610ded01526111f70152600081816107f8015281816108b3015281816109c0015261119601526000818161070c0152818161122a0152818161152601528181611647015281816117370152611846015260008181610c22015261176901526123986000f3fe6080604052600436106101e75760003560e01c8063919840ad11610102578063ca15c87311610095578063e8b5e51f11610064578063e8b5e51f14610561578063ea9fc17914610576578063eebab8ef14610598578063ff186b2e146105b857600080fd5b8063ca15c873146104cd578063ccc57490146104ed578063d547741f14610521578063e61989971461054157600080fd5b8063a9059cbb116100d1578063a9059cbb14610458578063af14052c14610478578063bb482f961461048d578063c4d66de8146104ad57600080fd5b8063919840ad146103f657806391d148541461040b5780639c373dc51461042b578063a217fddf1461044357600080fd5b80635591ce5a1161017a5780637b0a47ee116101495780637b0a47ee146103555780637c3a00fd146103895780638eb86e8b1461039e5780639010d07c146103be57600080fd5b80635591ce5a146102fe57806362ef432f146103145780636e33bfbe146103295780636ff156221461033f57600080fd5b8063351fe300116101b6578063351fe3001461029d57806336568abe146102b35780634233799c146102d35780634c68df67146102e857600080fd5b806301ffc9a7146101f3578063248a9ca3146102285780632c86d98e146102665780632f2ff15d1461027b57600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e366004611fa6565b6105cd565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610258610243366004611fd0565b60009081526020819052604090206001015490565b60405190815260200161021f565b34801561027257600080fd5b506102586105f8565b34801561028757600080fd5b5061029b610296366004612005565b61064c565b005b3480156102a957600080fd5b5061025860065481565b3480156102bf57600080fd5b5061029b6102ce366004612005565b610676565b3480156102df57600080fd5b506102586106f9565b3480156102f457600080fd5b5061025860045481565b34801561030a57600080fd5b5061025860055481565b34801561032057600080fd5b506102586107bc565b34801561033557600080fd5b5061025861271081565b34801561034b57600080fd5b5061025860075481565b34801561036157600080fd5b506102587f000000000000000000000000000000000000000000000000000000000000000081565b34801561039557600080fd5b506102586107f3565b3480156103aa57600080fd5b5061029b6103b9366004612042565b61097a565b3480156103ca57600080fd5b506103de6103d936600461207e565b610ad4565b6040516001600160a01b03909116815260200161021f565b34801561040257600080fd5b5061029b610af3565b34801561041757600080fd5b50610213610426366004612005565b610bae565b34801561043757600080fd5b506102586305f5e10081565b34801561044f57600080fd5b50610258600081565b34801561046457600080fd5b5061029b6104733660046120a0565b610bd7565b34801561048457600080fd5b5061029b610c89565b34801561049957600080fd5b5061029b6104a83660046120ca565b610d09565b3480156104b957600080fd5b5061029b6104c83660046120e6565b610ece565b3480156104d957600080fd5b506102586104e8366004611fd0565b610f75565b3480156104f957600080fd5b506102587f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561052d57600080fd5b5061029b61053c366004612005565b610f8c565b34801561054d57600080fd5b5061029b61055c3660046120ca565b610fb1565b34801561056d57600080fd5b5061029b61100c565b34801561058257600080fd5b5061025860008051602061234383398151915281565b3480156105a457600080fd5b5061029b6105b3366004612042565b611150565b3480156105c457600080fd5b50610258611226565b60006001600160e01b03198216635a05180f60e01b14806105f257506105f282611352565b92915050565b6000806106036107bc565b1161060f5750614e2090565b61061c6127106001612117565b6106246107bc565b60065461063390612710612117565b61063d9190612136565b6106479190612158565b905090565b60008281526020819052604090206001015461066781611387565b6106718383611394565b505050565b6001600160a01b03811633146106eb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f582826113b6565b5050565b6000600754600554670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b9190612170565b6004546107a89190612117565b6107b29190612136565b61063d9190612158565b6000600654670de0b6b3a76400006107d2611226565b6004546107df9190612117565b6107e99190612136565b6106479190612189565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190612170565b116108b157507f000000000000000000000000000000000000000000000000000000000000000090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190612170565b7f00000000000000000000000000000000000000000000000000000000000000006006546109709190612117565b6106479190612136565b60008051602061234383398151915261099281611387565b60ff8416610a2257604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044015b600060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b50505050610ace565b8360ff1660011415610a8357604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044016109eb565b604080518082018252601781527f54726561737572793a20496e76616c696420546f6b656e0000000000000000006020820152905162461bcd60e51b81526106e291906004016121cc565b50505050565b6000828152600160205260408120610aec90836113d8565b9392505050565b600280541415610b155760405162461bcd60e51b81526004016106e2906121ff565b60028055600654670de0b6b3a7640000610b2d611226565b600454610b3a9190612117565b610b449190612136565b1015610b7657670de0b6b3a7640000610b5b611226565b600454610b689190612117565b610b729190612136565b6006555b60056006546003610b879190612117565b610b919190612136565b610b996107bc565b1015610ba757610ba76113e4565b6001600255565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600280541415610bf95760405162461bcd60e51b81526004016106e2906121ff565b60028055600080516020612343833981519152610c1581611387565b610c496001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611429565b60405182906001600160a01b038516907f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de290600090a35050600160025550565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610cb381611387565b6305f5e1007f0000000000000000000000000000000000000000000000000000000000000000600654610ce69190612117565b610cf09190612136565b60066000828254610d019190612158565b909155505050565b600080516020612343833981519152610d2181611387565b600280541415610d435760405162461bcd60e51b81526004016106e2906121ff565b6002805560ff8316610dc9576005548211610d6857610d6360008361147b565b610ec4565b600060055483610d789190612189565b90506000610d84611226565b610d9683670de0b6b3a7640000612117565b610da09190612136565b9050610dab816114be565b50610db582611704565b610dc2600060055461147b565b5050610ec4565b8260ff1660011415610a83576007548211610de957610d6360018361147b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c9190612170565b83600454610e8a9190612117565b610e949190612136565b90506000610ea1826114be565b9050610eb2600061055c8684612189565b610dc2610ebf8583612189565b611704565b5050600160025550565b6000610ed981611387565b60035460408051808201909152601c81527f436f6e747261637420416c726561647920496e697469616c697a656400000000602082015290600160a01b900460ff1615610f395760405162461bcd60e51b81526004016106e291906121cc565b50600380546001600160a01b0384166001600160a81b031990911617600160a01b1790556106f560008051602061234383398151915283611394565b60008181526001602052604081206105f290611716565b600082815260208190526040902060010154610fa781611387565b61067183836113b6565b600080516020612343833981519152610fc981611387565b60ff8316610fee578160056000828254610fe39190612158565b909155506106719050565b8260ff1660011415610a83578160076000828254610fe39190612158565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103681611387565b6002805414156110585760405162461bcd60e51b81526004016106e2906121ff565b60028055600754156111485760055460075411156110e2576110886005546007546110839190612158565b611720565b5061109460055461195b565b6007546005546040517fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c90600090a36110d0600060055461147b565b6110dd600160075461147b565b611148565b6110f460075460026110839190612117565b5061110060075461195b565b60075460405181907fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c90600090a361113b600060075461147b565b611148600160075461147b565b506001600255565b60008051602061234383398151915261116881611387565b60ff84166111c5576040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044016109eb565b8360ff1660011415610a83576040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044016109eb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190612170565b6112c38282610bae565b6106f5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112f93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610aec836001600160a01b03841661196d565b60006001600160e01b03198216637965db0b60e01b14806105f257506301ffc9a760e01b6001600160e01b03198316146105f2565b61139181336119bc565b50565b61139e82826112b9565b6000828152600160205260409020610671908261133d565b6113c08282611a20565b60008281526001602052604090206106719082611a85565b6000610aec8383611a9a565b60006113fc600480546113f79190612136565b6114be565b905080600660008282546114109190612189565b925050819055508060056000828254610d019190612158565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610671908490611ac4565b60ff82166114a05780600560008282546114959190612189565b909155506106f59050565b8160ff1660011415610a835780600760008282546114959190612189565b600080821161150f5760405162461bcd60e51b815260206004820152601860248201527f54726561737572793a57726f6e6720506172616d65746572000000000000000060448201526064016106e2565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d19190612236565b6116175760405162461bcd60e51b8152602060048201526017602482015276151c99585cdd5c9e4e905c1c1c9bdd994811985a5b1959604a1b60448201526064016106e2565b81600460008282546116299190612189565b9091555050604051630760461560e41b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637604615090602401602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb9190612170565b905060045481847f54a7427e322c8225f1056b28c104a315b7a2e6e3a052c0ea1b514805031cdab960405160405180910390a492915050565b8060066000828254610d019190612189565b60006105f2825490565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612236565b61182d5760405162461bcd60e51b8152602060048201526017602482015276151c99585cdd5c9e4e905c1c1c9bdd994811985a5b1959604a1b60448201526064016106e2565b60405163e482836760e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e482836790602401602060405180830381600087803b15801561189257600080fd5b505af11580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190612170565b90506000811161190e5760405162461bcd60e51b815260206004820152600f60248201526e213abc9022ba3432b91022b93937b960891b60448201526064016106e2565b80600460008282546119209190612158565b9091555050600454604051829085907fb05532e21b444e9778dc1661bc462d41ba18ec113dc5e87d9d7a3849ff02d1e890600090a492915050565b8060066000828254610d019190612158565b60008181526001830160205260408120546119b4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f2565b5060006105f2565b6119c68282610bae565b6106f5576119de816001600160a01b03166014611b96565b6119e9836020611b96565b6040516020016119fa929190612258565b60408051601f198184030181529082905262461bcd60e51b82526106e2916004016121cc565b611a2a8282610bae565b156106f5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610aec836001600160a01b038416611d32565b6000826000018281548110611ab157611ab16122cd565b9060005260206000200154905092915050565b6000611b19826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e259092919063ffffffff16565b8051909150156106715780806020019051810190611b379190612236565b6106715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e2565b60606000611ba5836002612117565b611bb0906002612158565b67ffffffffffffffff811115611bc857611bc86122e3565b6040519080825280601f01601f191660200182016040528015611bf2576020820181803683370190505b509050600360fc1b81600081518110611c0d57611c0d6122cd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c3c57611c3c6122cd565b60200101906001600160f81b031916908160001a9053506000611c60846002612117565b611c6b906001612158565b90505b6001811115611ce3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c9f57611c9f6122cd565b1a60f81b828281518110611cb557611cb56122cd565b60200101906001600160f81b031916908160001a90535060049490941c93611cdc816122f9565b9050611c6e565b508315610aec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e2565b60008181526001830160205260408120548015611e1b576000611d56600183612189565b8554909150600090611d6a90600190612189565b9050818114611dcf576000866000018281548110611d8a57611d8a6122cd565b9060005260206000200154905080876000018481548110611dad57611dad6122cd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611de057611de0612310565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f2565b60009150506105f2565b6060611e348484600085611e3c565b949350505050565b606082471015611e9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e2565b6001600160a01b0385163b611ef45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e2565b600080866001600160a01b03168587604051611f109190612326565b60006040518083038185875af1925050503d8060008114611f4d576040519150601f19603f3d011682016040523d82523d6000602084013e611f52565b606091505b5091509150611f62828286611f6d565b979650505050505050565b60608315611f7c575081610aec565b825115611f8c5782518084602001fd5b8160405162461bcd60e51b81526004016106e291906121cc565b600060208284031215611fb857600080fd5b81356001600160e01b031981168114610aec57600080fd5b600060208284031215611fe257600080fd5b5035919050565b80356001600160a01b038116811461200057600080fd5b919050565b6000806040838503121561201857600080fd5b8235915061202860208401611fe9565b90509250929050565b803560ff8116811461200057600080fd5b60008060006060848603121561205757600080fd5b61206084612031565b925061206e60208501611fe9565b9150604084013590509250925092565b6000806040838503121561209157600080fd5b50508035926020909101359150565b600080604083850312156120b357600080fd5b6120bc83611fe9565b946020939093013593505050565b600080604083850312156120dd57600080fd5b6120bc83612031565b6000602082840312156120f857600080fd5b610aec82611fe9565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561213157612131612101565b500290565b60008261215357634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561216b5761216b612101565b500190565b60006020828403121561218257600080fd5b5051919050565b60008282101561219b5761219b612101565b500390565b60005b838110156121bb5781810151838201526020016121a3565b83811115610ace5750506000910152565b60208152600082518060208401526121eb8160408501602087016121a0565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561224857600080fd5b81518015158114610aec57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516122908160178501602088016121a0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122c18160288401602088016121a0565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008161230857612308612101565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516123388184602087016121a0565b919091019291505056fe49df85275badebe343b7d35f7679f3258179609d3710b80119af5779c66ec84fa2646970667358221220798ca1dad643c26b2dfc323efbec94e94c3b1c83e72e5fb4ff3cc9c88765dc1764736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c8063919840ad11610102578063ca15c87311610095578063e8b5e51f11610064578063e8b5e51f14610561578063ea9fc17914610576578063eebab8ef14610598578063ff186b2e146105b857600080fd5b8063ca15c873146104cd578063ccc57490146104ed578063d547741f14610521578063e61989971461054157600080fd5b8063a9059cbb116100d1578063a9059cbb14610458578063af14052c14610478578063bb482f961461048d578063c4d66de8146104ad57600080fd5b8063919840ad146103f657806391d148541461040b5780639c373dc51461042b578063a217fddf1461044357600080fd5b80635591ce5a1161017a5780637b0a47ee116101495780637b0a47ee146103555780637c3a00fd146103895780638eb86e8b1461039e5780639010d07c146103be57600080fd5b80635591ce5a146102fe57806362ef432f146103145780636e33bfbe146103295780636ff156221461033f57600080fd5b8063351fe300116101b6578063351fe3001461029d57806336568abe146102b35780634233799c146102d35780634c68df67146102e857600080fd5b806301ffc9a7146101f3578063248a9ca3146102285780632c86d98e146102665780632f2ff15d1461027b57600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061021361020e366004611fa6565b6105cd565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610258610243366004611fd0565b60009081526020819052604090206001015490565b60405190815260200161021f565b34801561027257600080fd5b506102586105f8565b34801561028757600080fd5b5061029b610296366004612005565b61064c565b005b3480156102a957600080fd5b5061025860065481565b3480156102bf57600080fd5b5061029b6102ce366004612005565b610676565b3480156102df57600080fd5b506102586106f9565b3480156102f457600080fd5b5061025860045481565b34801561030a57600080fd5b5061025860055481565b34801561032057600080fd5b506102586107bc565b34801561033557600080fd5b5061025861271081565b34801561034b57600080fd5b5061025860075481565b34801561036157600080fd5b506102587f000000000000000000000000000000000000000000000000000000000000000081565b34801561039557600080fd5b506102586107f3565b3480156103aa57600080fd5b5061029b6103b9366004612042565b61097a565b3480156103ca57600080fd5b506103de6103d936600461207e565b610ad4565b6040516001600160a01b03909116815260200161021f565b34801561040257600080fd5b5061029b610af3565b34801561041757600080fd5b50610213610426366004612005565b610bae565b34801561043757600080fd5b506102586305f5e10081565b34801561044f57600080fd5b50610258600081565b34801561046457600080fd5b5061029b6104733660046120a0565b610bd7565b34801561048457600080fd5b5061029b610c89565b34801561049957600080fd5b5061029b6104a83660046120ca565b610d09565b3480156104b957600080fd5b5061029b6104c83660046120e6565b610ece565b3480156104d957600080fd5b506102586104e8366004611fd0565b610f75565b3480156104f957600080fd5b506102587f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561052d57600080fd5b5061029b61053c366004612005565b610f8c565b34801561054d57600080fd5b5061029b61055c3660046120ca565b610fb1565b34801561056d57600080fd5b5061029b61100c565b34801561058257600080fd5b5061025860008051602061234383398151915281565b3480156105a457600080fd5b5061029b6105b3366004612042565b611150565b3480156105c457600080fd5b50610258611226565b60006001600160e01b03198216635a05180f60e01b14806105f257506105f282611352565b92915050565b6000806106036107bc565b1161060f5750614e2090565b61061c6127106001612117565b6106246107bc565b60065461063390612710612117565b61063d9190612136565b6106479190612158565b905090565b60008281526020819052604090206001015461066781611387565b6106718383611394565b505050565b6001600160a01b03811633146106eb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106f582826113b6565b5050565b6000600754600554670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b9190612170565b6004546107a89190612117565b6107b29190612136565b61063d9190612158565b6000600654670de0b6b3a76400006107d2611226565b6004546107df9190612117565b6107e99190612136565b6106479190612189565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190612170565b116108b157507f000000000000000000000000000000000000000000000000000000000000000090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190612170565b7f00000000000000000000000000000000000000000000000000000000000000006006546109709190612117565b6106479190612136565b60008051602061234383398151915261099281611387565b60ff8416610a2257604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044015b600060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b50505050610ace565b8360ff1660011415610a8357604051632770a7eb60e21b81526001600160a01b038481166004830152602482018490527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044016109eb565b604080518082018252601781527f54726561737572793a20496e76616c696420546f6b656e0000000000000000006020820152905162461bcd60e51b81526106e291906004016121cc565b50505050565b6000828152600160205260408120610aec90836113d8565b9392505050565b600280541415610b155760405162461bcd60e51b81526004016106e2906121ff565b60028055600654670de0b6b3a7640000610b2d611226565b600454610b3a9190612117565b610b449190612136565b1015610b7657670de0b6b3a7640000610b5b611226565b600454610b689190612117565b610b729190612136565b6006555b60056006546003610b879190612117565b610b919190612136565b610b996107bc565b1015610ba757610ba76113e4565b6001600255565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600280541415610bf95760405162461bcd60e51b81526004016106e2906121ff565b60028055600080516020612343833981519152610c1581611387565b610c496001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484611429565b60405182906001600160a01b038516907f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de290600090a35050600160025550565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610cb381611387565b6305f5e1007f0000000000000000000000000000000000000000000000000000000000000000600654610ce69190612117565b610cf09190612136565b60066000828254610d019190612158565b909155505050565b600080516020612343833981519152610d2181611387565b600280541415610d435760405162461bcd60e51b81526004016106e2906121ff565b6002805560ff8316610dc9576005548211610d6857610d6360008361147b565b610ec4565b600060055483610d789190612189565b90506000610d84611226565b610d9683670de0b6b3a7640000612117565b610da09190612136565b9050610dab816114be565b50610db582611704565b610dc2600060055461147b565b5050610ec4565b8260ff1660011415610a83576007548211610de957610d6360018361147b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634233799c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c9190612170565b83600454610e8a9190612117565b610e949190612136565b90506000610ea1826114be565b9050610eb2600061055c8684612189565b610dc2610ebf8583612189565b611704565b5050600160025550565b6000610ed981611387565b60035460408051808201909152601c81527f436f6e747261637420416c726561647920496e697469616c697a656400000000602082015290600160a01b900460ff1615610f395760405162461bcd60e51b81526004016106e291906121cc565b50600380546001600160a01b0384166001600160a81b031990911617600160a01b1790556106f560008051602061234383398151915283611394565b60008181526001602052604081206105f290611716565b600082815260208190526040902060010154610fa781611387565b61067183836113b6565b600080516020612343833981519152610fc981611387565b60ff8316610fee578160056000828254610fe39190612158565b909155506106719050565b8260ff1660011415610a83578160076000828254610fe39190612158565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103681611387565b6002805414156110585760405162461bcd60e51b81526004016106e2906121ff565b60028055600754156111485760055460075411156110e2576110886005546007546110839190612158565b611720565b5061109460055461195b565b6007546005546040517fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c90600090a36110d0600060055461147b565b6110dd600160075461147b565b611148565b6110f460075460026110839190612117565b5061110060075461195b565b60075460405181907fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c90600090a361113b600060075461147b565b611148600160075461147b565b506001600255565b60008051602061234383398151915261116881611387565b60ff84166111c5576040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044016109eb565b8360ff1660011415610a83576040516340c10f1960e01b81526001600160a01b038481166004830152602482018490527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044016109eb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128157600080fd5b505afa158015611295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190612170565b6112c38282610bae565b6106f5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112f93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610aec836001600160a01b03841661196d565b60006001600160e01b03198216637965db0b60e01b14806105f257506301ffc9a760e01b6001600160e01b03198316146105f2565b61139181336119bc565b50565b61139e82826112b9565b6000828152600160205260409020610671908261133d565b6113c08282611a20565b60008281526001602052604090206106719082611a85565b6000610aec8383611a9a565b60006113fc600480546113f79190612136565b6114be565b905080600660008282546114109190612189565b925050819055508060056000828254610d019190612158565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610671908490611ac4565b60ff82166114a05780600560008282546114959190612189565b909155506106f59050565b8160ff1660011415610a835780600760008282546114959190612189565b600080821161150f5760405162461bcd60e51b815260206004820152601860248201527f54726561737572793a57726f6e6720506172616d65746572000000000000000060448201526064016106e2565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561159957600080fd5b505af11580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d19190612236565b6116175760405162461bcd60e51b8152602060048201526017602482015276151c99585cdd5c9e4e905c1c1c9bdd994811985a5b1959604a1b60448201526064016106e2565b81600460008282546116299190612189565b9091555050604051630760461560e41b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637604615090602401602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb9190612170565b905060045481847f54a7427e322c8225f1056b28c104a315b7a2e6e3a052c0ea1b514805031cdab960405160405180910390a492915050565b8060066000828254610d019190612189565b60006105f2825490565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e79190612236565b61182d5760405162461bcd60e51b8152602060048201526017602482015276151c99585cdd5c9e4e905c1c1c9bdd994811985a5b1959604a1b60448201526064016106e2565b60405163e482836760e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e482836790602401602060405180830381600087803b15801561189257600080fd5b505af11580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190612170565b90506000811161190e5760405162461bcd60e51b815260206004820152600f60248201526e213abc9022ba3432b91022b93937b960891b60448201526064016106e2565b80600460008282546119209190612158565b9091555050600454604051829085907fb05532e21b444e9778dc1661bc462d41ba18ec113dc5e87d9d7a3849ff02d1e890600090a492915050565b8060066000828254610d019190612158565b60008181526001830160205260408120546119b4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f2565b5060006105f2565b6119c68282610bae565b6106f5576119de816001600160a01b03166014611b96565b6119e9836020611b96565b6040516020016119fa929190612258565b60408051601f198184030181529082905262461bcd60e51b82526106e2916004016121cc565b611a2a8282610bae565b156106f5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610aec836001600160a01b038416611d32565b6000826000018281548110611ab157611ab16122cd565b9060005260206000200154905092915050565b6000611b19826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e259092919063ffffffff16565b8051909150156106715780806020019051810190611b379190612236565b6106715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e2565b60606000611ba5836002612117565b611bb0906002612158565b67ffffffffffffffff811115611bc857611bc86122e3565b6040519080825280601f01601f191660200182016040528015611bf2576020820181803683370190505b509050600360fc1b81600081518110611c0d57611c0d6122cd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c3c57611c3c6122cd565b60200101906001600160f81b031916908160001a9053506000611c60846002612117565b611c6b906001612158565b90505b6001811115611ce3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c9f57611c9f6122cd565b1a60f81b828281518110611cb557611cb56122cd565b60200101906001600160f81b031916908160001a90535060049490941c93611cdc816122f9565b9050611c6e565b508315610aec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106e2565b60008181526001830160205260408120548015611e1b576000611d56600183612189565b8554909150600090611d6a90600190612189565b9050818114611dcf576000866000018281548110611d8a57611d8a6122cd565b9060005260206000200154905080876000018481548110611dad57611dad6122cd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611de057611de0612310565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f2565b60009150506105f2565b6060611e348484600085611e3c565b949350505050565b606082471015611e9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e2565b6001600160a01b0385163b611ef45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e2565b600080866001600160a01b03168587604051611f109190612326565b60006040518083038185875af1925050503d8060008114611f4d576040519150601f19603f3d011682016040523d82523d6000602084013e611f52565b606091505b5091509150611f62828286611f6d565b979650505050505050565b60608315611f7c575081610aec565b825115611f8c5782518084602001fd5b8160405162461bcd60e51b81526004016106e291906121cc565b600060208284031215611fb857600080fd5b81356001600160e01b031981168114610aec57600080fd5b600060208284031215611fe257600080fd5b5035919050565b80356001600160a01b038116811461200057600080fd5b919050565b6000806040838503121561201857600080fd5b8235915061202860208401611fe9565b90509250929050565b803560ff8116811461200057600080fd5b60008060006060848603121561205757600080fd5b61206084612031565b925061206e60208501611fe9565b9150604084013590509250925092565b6000806040838503121561209157600080fd5b50508035926020909101359150565b600080604083850312156120b357600080fd5b6120bc83611fe9565b946020939093013593505050565b600080604083850312156120dd57600080fd5b6120bc83612031565b6000602082840312156120f857600080fd5b610aec82611fe9565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561213157612131612101565b500290565b60008261215357634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561216b5761216b612101565b500190565b60006020828403121561218257600080fd5b5051919050565b60008282101561219b5761219b612101565b500390565b60005b838110156121bb5781810151838201526020016121a3565b83811115610ace5750506000910152565b60208152600082518060208401526121eb8160408501602087016121a0565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561224857600080fd5b81518015158114610aec57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516122908160178501602088016121a0565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516122c18160288401602088016121a0565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008161230857612308612101565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516123388184602087016121a0565b919091019291505056fe49df85275badebe343b7d35f7679f3258179609d3710b80119af5779c66ec84fa2646970667358221220798ca1dad643c26b2dfc323efbec94e94c3b1c83e72e5fb4ff3cc9c88765dc1764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint8,address,uint256)": {
        "params": {
          "from_": "账户地址",
          "qty_": "数量",
          "type_": "0为aToken,1为bToken"
        }
      },
      "ethPrice()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "incPooledAmount(uint8,uint256)": {
        "params": {
          "amt_": "金额",
          "type_": "0为aToken,1为bToken"
        }
      },
      "initialize(address)": {
        "params": {
          "purchase_": "申购合约地址"
        }
      },
      "leverage()": {
        "returns": {
          "_0": "uint256   bToken的杠杆率"
        }
      },
      "matchedB()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "mint(uint8,address,uint256)": {
        "params": {
          "qty_": "数量",
          "to_": "账户地址",
          "type_": "0为aToken,1为bToken"
        }
      },
      "redeem(uint8,uint256)": {
        "params": {
          "amt_": "金额",
          "type_": "0为aToken,1为bToken"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalNetWorth()": {
        "returns": {
          "_0": "uint256       金库总储备净值"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "qty_": "USDT数量",
          "to_": "账户地址"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint8,address,uint256)": {
        "notice": "销毁aToken和bToken"
      },
      "check()": {
        "notice": "检查bToken的已配对资金,如果小于aToken的已配对资金的60%则触发下折"
      },
      "ethPrice()": {
        "notice": "返回交易所的stEth价格"
      },
      "incPooledAmount(uint8,uint256)": {
        "notice": "增加未配对资金"
      },
      "initialize(address)": {
        "notice": "初始化方法"
      },
      "interestRate()": {
        "notice": "动态计算aToken的日利息"
      },
      "invest()": {
        "notice": "从资金池中拿出资金进行投资"
      },
      "leverage()": {
        "notice": "杠杆率=aToken已配对资金/bToken已配对资金+1"
      },
      "matchedB()": {
        "notice": "计算bToken的已配对资金"
      },
      "mint(uint8,address,uint256)": {
        "notice": "开采aToken和bToken"
      },
      "rebase()": {
        "notice": "变基,aToken的已配对资金增加"
      },
      "redeem(uint8,uint256)": {
        "notice": "赎回时金库的操作"
      },
      "totalNetWorth()": {
        "notice": "金库总储备净值=以太币总储量*当前以太币价格+pooledA+pooledB"
      },
      "transfer(address,uint256)": {
        "notice": "金库发送USDT给用户"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 384,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2850_storage)"
      },
      {
        "astId": 691,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5150,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "purchase",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(EzPurchase)3523"
      },
      {
        "astId": 5152,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "initialized",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 5154,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "totalReserve",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5156,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "pooledA",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5158,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "matchedA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5160,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "pooledB",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(EzPurchase)3523": {
        "encoding": "inplace",
        "label": "contract EzPurchase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2850_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2850_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2850_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2849,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2549_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2549_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2544,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2548,
            "contract": "contracts/Treasury.sol:Treasury",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}