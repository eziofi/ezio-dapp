/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Conversion,
  ConversionInterface,
} from "../../contracts/Conversion";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "stableToken_",
        type: "address",
      },
      {
        internalType: "contract IERC20Metadata",
        name: "reserveToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "aggregatorAction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
    ],
    name: "convertAmt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
    ],
    name: "setAggregators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenAggregators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161097b38038061097b83398101604081905261002f916100d5565b61003833610069565b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b610864806101176000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638e6334db1161005b5780638e6334db146100f557806392be8bfd1461011e578063d1b37b6d14610131578063f2fde38b1461014457600080fd5b8063247aa8d91461008d57806341976e09146100b3578063715018a6146100c65780638da5cb5b146100d0575b600080fd5b6100a061009b36600461056f565b610157565b6040519081526020015b60405180910390f35b6100a06100c136600461056f565b610256565b6100ce61029f565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100aa565b6100dd61010336600461056f565b6001602052600090815260409020546001600160a01b031681565b6100ce61012c366004610591565b6102b3565b6100a061013f3660046105c4565b6102e9565b6100ce61015236600461056f565b610430565b6001600160a01b03808216600090815260016020526040808220548151633fabe5a360e21b81529151929316918391839163feaf968c9160048082019260a092909190829003018186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061061a565b50505091505060008112156040518060400160405280601b81526020017f436f6e76657273696f6e3a20476574205072696365204572726f7200000000008152509061024e5760405162461bcd60e51b8152600401610245919061066a565b60405180910390fd5b509392505050565b6002546000908190610270906001600160a01b0316610157565b9050600061027d84610157565b90508161028d82620f42406106d5565b61029791906106f4565b949350505050565b6102a76104a9565b6102b16000610503565b565b6102bb6104a9565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000808490506000849050816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561032d57600080fd5b505afa158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610716565b61037090600a61081f565b61037986610256565b61038391906106d5565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103bc57600080fd5b505afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610716565b6103ff90600a61081f565b61040888610256565b61041290876106d5565b61041c91906106d5565b61042691906106f4565b9695505050505050565b6104386104a9565b6001600160a01b03811661049d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610245565b6104a681610503565b50565b6000546001600160a01b031633146102b15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610245565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461056a57600080fd5b919050565b60006020828403121561058157600080fd5b61058a82610553565b9392505050565b600080604083850312156105a457600080fd5b6105ad83610553565b91506105bb60208401610553565b90509250929050565b6000806000606084860312156105d957600080fd5b6105e284610553565b92506105f060208501610553565b9150604084013590509250925092565b805169ffffffffffffffffffff8116811461056a57600080fd5b600080600080600060a0868803121561063257600080fd5b61063b86610600565b945060208601519350604086015192506060860151915061065e60808701610600565b90509295509295909350565b600060208083528351808285015260005b818110156106975785810183015185820160400152820161067b565b818111156106a9576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156106ef576106ef6106bf565b500290565b60008261071157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561072857600080fd5b815160ff8116811461058a57600080fd5b600181815b8085111561077457816000190482111561075a5761075a6106bf565b8085161561076757918102915b93841c939080029061073e565b509250929050565b60008261078b57506001610819565b8161079857506000610819565b81600181146107ae57600281146107b8576107d4565b6001915050610819565b60ff8411156107c9576107c96106bf565b50506001821b610819565b5060208310610133831016604e8410600b84101617156107f7575081810a610819565b6108018383610739565b8060001904821115610815576108156106bf565b0290505b92915050565b600061058a60ff84168361077c56fea26469706673582212200f1780de20a13118f62edce4eed2cbce5fda6ddcfb882188608e70715fd9b57c64736f6c63430008080033";

type ConversionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConversionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Conversion__factory extends ContractFactory {
  constructor(...args: ConversionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    stableToken_: PromiseOrValue<string>,
    reserveToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Conversion> {
    return super.deploy(
      stableToken_,
      reserveToken_,
      overrides || {}
    ) as Promise<Conversion>;
  }
  override getDeployTransaction(
    stableToken_: PromiseOrValue<string>,
    reserveToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      stableToken_,
      reserveToken_,
      overrides || {}
    );
  }
  override attach(address: string): Conversion {
    return super.attach(address) as Conversion;
  }
  override connect(signer: Signer): Conversion__factory {
    return super.connect(signer) as Conversion__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConversionInterface {
    return new utils.Interface(_abi) as ConversionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Conversion {
    return new Contract(address, _abi, signerOrProvider) as Conversion;
  }
}
