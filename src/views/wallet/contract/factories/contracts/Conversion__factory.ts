/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Conversion,
  ConversionInterface,
} from "../../contracts/Conversion";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stableToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "reserveToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "aggregatorAction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sourceAmount",
        type: "uint256",
      },
    ],
    name: "convertAmt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "aggregatorAddress",
        type: "address",
      },
    ],
    name: "setAggregators",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenAggregators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516109b93803806109b9833981016040819052610030916100d4565b61003933610068565b6001600160601b0319606092831b811660808190529190921b90911660a081905260c09190915260e052610107565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100cf57600080fd5b919050565b600080604083850312156100e757600080fd5b6100f0836100b8565b91506100fe602084016100b8565b90509250929050565b60805160601c60a05160601c60c05160601c60e05160601c610876610143600039600050506000505060005050600061025e01526108766000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638e6334db1161005b5780638e6334db146100f557806392be8bfd1461011e578063d1b37b6d14610131578063f2fde38b1461014457600080fd5b8063247aa8d91461008d57806341976e09146100b3578063715018a6146100c65780638da5cb5b146100d0575b600080fd5b6100a061009b366004610581565b610157565b6040519081526020015b60405180910390f35b6100a06100c1366004610581565b610256565b6100ce6102b1565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100aa565b6100dd610103366004610581565b6001602052600090815260409020546001600160a01b031681565b6100ce61012c3660046105a3565b6102c5565b6100a061013f3660046105d6565b6102fb565b6100ce610152366004610581565b610442565b6001600160a01b03808216600090815260016020526040808220548151633fabe5a360e21b81529151929316918391839163feaf968c9160048082019260a092909190829003018186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061062c565b50505091505060008112156040518060400160405280601b81526020017f436f6e76657273696f6e3a20476574205072696365204572726f7200000000008152509061024e5760405162461bcd60e51b8152600401610245919061067c565b60405180910390fd5b509392505050565b6000806102827f0000000000000000000000000000000000000000000000000000000000000000610157565b9050600061028f84610157565b90508161029f82620f42406106e7565b6102a99190610706565b949350505050565b6102b96104bb565b6102c36000610515565b565b6102cd6104bb565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000808490506000849050816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561033f57600080fd5b505afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610728565b61038290600a610831565b61038b86610256565b61039591906106e7565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ce57600080fd5b505afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104069190610728565b61041190600a610831565b61041a88610256565b61042490876106e7565b61042e91906106e7565b6104389190610706565b9695505050505050565b61044a6104bb565b6001600160a01b0381166104af5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610245565b6104b881610515565b50565b6000546001600160a01b031633146102c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610245565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461057c57600080fd5b919050565b60006020828403121561059357600080fd5b61059c82610565565b9392505050565b600080604083850312156105b657600080fd5b6105bf83610565565b91506105cd60208401610565565b90509250929050565b6000806000606084860312156105eb57600080fd5b6105f484610565565b925061060260208501610565565b9150604084013590509250925092565b805169ffffffffffffffffffff8116811461057c57600080fd5b600080600080600060a0868803121561064457600080fd5b61064d86610612565b945060208601519350604086015192506060860151915061067060808701610612565b90509295509295909350565b600060208083528351808285015260005b818110156106a95785810183015185820160400152820161068d565b818111156106bb576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610701576107016106d1565b500290565b60008261072357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561073a57600080fd5b815160ff8116811461059c57600080fd5b600181815b8085111561078657816000190482111561076c5761076c6106d1565b8085161561077957918102915b93841c9390800290610750565b509250929050565b60008261079d5750600161082b565b816107aa5750600061082b565b81600181146107c057600281146107ca576107e6565b600191505061082b565b60ff8411156107db576107db6106d1565b50506001821b61082b565b5060208310610133831016604e8410600b8410161715610809575081810a61082b565b610813838361074b565b8060001904821115610827576108276106d1565b0290505b92915050565b600061059c60ff84168361078e56fea264697066735822122065639421f5cd006a99ccb467c0c72b5da05c8b685e639112a04d3895907cedb464736f6c63430008080033";

type ConversionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConversionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Conversion__factory extends ContractFactory {
  constructor(...args: ConversionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    stableToken_: PromiseOrValue<string>,
    reserveToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Conversion> {
    return super.deploy(
      stableToken_,
      reserveToken_,
      overrides || {}
    ) as Promise<Conversion>;
  }
  override getDeployTransaction(
    stableToken_: PromiseOrValue<string>,
    reserveToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      stableToken_,
      reserveToken_,
      overrides || {}
    );
  }
  override attach(address: string): Conversion {
    return super.attach(address) as Conversion;
  }
  override connect(signer: Signer): Conversion__factory {
    return super.connect(signer) as Conversion__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConversionInterface {
    return new utils.Interface(_abi) as ConversionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Conversion {
    return new Contract(address, _abi, signerOrProvider) as Conversion;
  }
}
