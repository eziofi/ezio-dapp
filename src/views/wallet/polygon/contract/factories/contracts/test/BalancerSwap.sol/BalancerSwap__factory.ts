/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BalancerSwap,
  BalancerSwapInterface,
} from "../../../../contracts/test/BalancerSwap.sol/BalancerSwap";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POOL_ID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "enum SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IAsset",
            name: "assetIn",
            type: "address",
          },
          {
            internalType: "contract IAsset",
            name: "assetOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct SingleSwap",
        name: "singleSwap",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountCalculated",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319167332296969ef14eb0c6d29669c550d4a044913023017905561036f806100466000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806352bbbe2914610046578063e0d7d0e914610071578063fe94df8814610098575b600080fd5b61005e610054366004610262565b6000949350505050565b6040519081526020015b60405180910390f35b61005e7f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008081565b6100b37332296969ef14eb0c6d29669c550d4a044913023081565b6040516001600160a01b039091168152602001610068565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610104576101046100cb565b60405290565b80356002811061011957600080fd5b919050565b6001600160a01b038116811461013357600080fd5b50565b80356101198161011e565b600082601f83011261015257600080fd5b813567ffffffffffffffff8082111561016d5761016d6100cb565b604051601f8301601f19908116603f01168101908282118183101715610195576101956100cb565b816040528381528660208588010111156101ae57600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035801515811461011957600080fd5b6000608082840312156101f057600080fd5b6040516080810181811067ffffffffffffffff82111715610213576102136100cb565b60405290508082356102248161011e565b8152610232602084016101ce565b602082015260408301356102458161011e565b6040820152610256606084016101ce565b60608201525092915050565b60008060008060e0858703121561027857600080fd5b843567ffffffffffffffff8082111561029057600080fd5b9086019060c082890312156102a457600080fd5b6102ac6100e1565b823581526102bc6020840161010a565b60208201526102cd60408401610136565b60408201526102de60608401610136565b60608201526080830135608082015260a0830135828111156102ff57600080fd5b61030b8a828601610141565b60a08301525080965050505061032486602087016101de565b939693955050505060a08201359160c001359056fea26469706673582212201cefa056c93a8ae9bfb63f0d0e18a1ef551c00ea42ef1caf83f4e637ee09755164736f6c63430008080033";

type BalancerSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerSwap__factory extends ContractFactory {
  constructor(...args: BalancerSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalancerSwap> {
    return super.deploy(overrides || {}) as Promise<BalancerSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BalancerSwap {
    return super.attach(address) as BalancerSwap;
  }
  override connect(signer: Signer): BalancerSwap__factory {
    return super.connect(signer) as BalancerSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerSwapInterface {
    return new utils.Interface(_abi) as BalancerSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerSwap {
    return new Contract(address, _abi, signerOrProvider) as BalancerSwap;
  }
}
